{"version":3,"file":"static/js/436.f9e18e26.chunk.js","mappings":"oLACA,G,QAA0B,0BAA1B,EAAkE,8BAAlE,EAA6K,0BAA7K,EAA4P,iCAA5P,EAA2S,6BAA3S,EAAyV,gCAAzV,EAAiY,uBCAjY,EAAyB,2BAAzB,EAA6D,2B,mBCQhDA,EAA4C,SAACC,GACtD,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OACI,gBAAKC,UAAWC,EAAhB,UACI,SAAC,KAAD,CAASC,gBAAiBD,EAAUE,GAAIL,EAAxC,SAA+CD,EAAMO,UCbjE,EAA+D,yBCOlDC,EAAsC,SAACR,GAChD,OAAO,iBAAKG,UAAWC,EAAhB,WACH,gBACIK,IAAI,+lBACJC,IAAI,WACPV,EAAMW,Y,UCgCFC,EAAiB,SAACZ,GAE3B,IAAMa,GAASC,EAAAA,EAAAA,IAAU,CACrBC,cAAe,CACXJ,QAAS,IAEbK,SAAU,SAACC,GACP,IAAMC,EAA0B,GAKhC,OAJKD,EAAON,UACRO,EAAOP,QAAU,wBAGdO,GAEXC,SAAU,SAAAF,GAGNjB,EAAMoB,YAAYH,EAAON,SACzBE,EAAOQ,eAIf,OACI,iCACI,kBAAMlB,UAAWC,EAAmBe,SAAUN,EAAOS,aAArD,WACQ,qCACIC,YAAY,gBACZpB,UAAWU,EAAOK,OAAOP,QAAUP,EAAU,IAAMA,EAAgBA,GAC/DS,EAAOW,cAAc,YAH7B,IAIIjB,KAAK,UACLkB,OAAQZ,EAAOa,WACfC,MAAOd,EAAOI,OAAON,YAM7B,mBAAQR,UAAWC,EACXwB,UAAWf,EAAOgB,SAAWhB,EAAOI,OAAON,QAAQmB,OAAS,EADpE,sBAIJ,iBAAMC,MAAO,CAACC,MAAO,OAArB,SAA8BnB,EAAOK,OAAOP,c,oDCjFlDsB,EAAkB,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,SCC3B,IAcA,GAAeE,EAAAA,EAAAA,KDXR,SAA6BC,GAUhC,OAFiCC,EAAAA,EAAAA,IAAQN,EAARM,EAPP,SAACvC,GACvB,IAAKmC,EAAwBnC,EAAxBmC,OAAWK,GAAhB,OAA6BxC,EAA7B,GACA,OAAKmC,GAEE,SAACG,GAAD,UAAeE,KAFF,SAAC,KAAD,CAAUlC,GAAI,iBCQoBiC,EAAAA,EAAAA,KAdxC,SAACL,GACnB,MAAO,CACHO,YAAaP,EAAMO,gBAIF,SAACC,GACtB,MAAO,CACHC,mBAAoB,SAAChC,GACjB+B,GAASE,EAAAA,EAAAA,GAAyBjC,SAK9C,EFfmD,SAACX,GAEhD,IAAMkC,EAAQlC,EAAMyC,YAChBI,EAAmBX,EAAMY,SAASC,KAAI,SAACC,GAAD,OAAO,SAACxC,EAAD,CAAoBG,QAASqC,EAAErC,QAAST,GAAI8C,EAAE9C,IAAhC8C,EAAE9C,OAC7D+C,EAAkBf,EAAMgB,QAAQH,KAAI,SAACI,GACrC,OACI,SAACpD,EAAD,CAAuBQ,KAAM4C,EAAE5C,KAAML,GAAIiD,EAAEjD,IAA1BiD,EAAEjD,OAS3B,OACI,iBAAKC,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACK6C,KAEL,iBAAK9C,UAAWC,EAAhB,UACKyC,GACD,SAACjC,EAAD,CAAgBQ,YAZD,SAACT,GACxBX,EAAM2C,mBAAmBhC","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://samurai-way/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.tsx","webpack://samurai-way/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__g72mt\",\"dialogsItems\":\"Dialogs_dialogsItems__U9PUl\",\"dialog\":\"Dialogs_dialog__ctGXe\",\"active\":\"Dialogs_active__YKMEL\",\"messages\":\"Dialogs_messages__UmVnt\",\"message\":\"Dialogs_message__-3rEW\",\"sendMessageForm\":\"Dialogs_sendMessageForm__eEbiB\",\"messageArea\":\"Dialogs_messageArea__qoT41\",\"sendMessageBtn\":\"Dialogs_sendMessageBtn__MNmSh\",\"error\":\"Dialogs_error__adffy\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"DialogItem_dialog__BUYsS\",\"active\":\"DialogItem_active__suiau\"};","import React from 'react';\r\nimport s from './DialogItem.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemPropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nexport const DialogItem: React.FC<DialogItemPropsType> = (props) => {\r\n    let path = '/dialogs/' + props.id\r\n\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink activeClassName={s.active} to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"messages\":\"Message_messages__WPmHz\",\"message\":\"Message_message__JBU56\"};","import React from 'react';\r\nimport s from './Message.module.css'\r\n\r\ntype MessagePropsType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nexport const Message: React.FC<MessagePropsType> = (props) => {\r\n    return <div className={s.message}>\r\n        <img\r\n            src=\"https://media.istockphoto.com/id/1300845620/ru/%D0%B2%D0%B5%D0%BA%D1%82%D0%BE%D1%80%D0%BD%D0%B0%D1%8F/%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8C-icon-flat-%D0%B8%D0%B7%D0%BE%D0%BB%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD-%D0%BD%D0%B0-%D0%B1%D0%B5%D0%BB%D0%BE%D0%BC-%D1%84%D0%BE%D0%BD%D0%B5-%D1%81%D0%B8%D0%BC%D0%B2%D0%BE%D0%BB-%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8F-%D0%B8%D0%BB%D0%BB%D1%8E%D1%81%D1%82%D1%80%D0%B0%D1%86%D0%B8%D1%8F-%D0%B2%D0%B5%D0%BA%D1%82%D0%BE%D1%80%D0%B0.jpg?s=612x612&w=0&k=20&c=Po5TTi0yw6lM7qz6yay5vUbUBy3kAEWrpQmDaUMWnek=\"\r\n            alt=\"avatar\"/>\r\n        {props.message}\r\n    </div>\r\n}\r\n\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogsPageType} from \"../../redux/DialogsReducer\";\r\nimport {useFormik} from \"formik\";\r\n\r\nexport const Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n\r\n    const state = props.dialogsPage\r\n    let messagesElements = state.messages.map((m) => <Message key={m.id} message={m.message} id={m.id}/>)\r\n    let dialogsElements = state.dialogs.map((d) => {\r\n        return (\r\n            <DialogItem key={d.id} name={d.name} id={d.id}/>\r\n        )\r\n    })\r\n\r\n    const onSendMessageClick = (message: string) => {\r\n        props.onSendMessageClick(message)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n                <AddMessageForm sendMessage={onSendMessageClick}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n//Types\r\nexport type DialogsPropsType = {\r\n    onNewMessageChange: (text: string) => void\r\n    onSendMessageClick: (message: string) => void\r\n    dialogsPage: DialogsPageType\r\n    isAuth: boolean\r\n}\r\n\r\n\r\nexport const AddMessageForm = (props: PropsType) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            message: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.message) {\r\n                errors.message = 'Ð¡annot be empty'\r\n            }\r\n\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            // dispatch(loginTC(values))\r\n            // alert(JSON.stringify(values));\r\n            props.sendMessage(values.message)\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <form className={s.sendMessageForm} onSubmit={formik.handleSubmit}>\r\n                    <textarea\r\n                        placeholder='Enter message'\r\n                        className={formik.errors.message ? s.error + ' ' + s.messageArea : s.messageArea}\r\n                        {...formik.getFieldProps('message')}\r\n                        name=\"message\"\r\n                        onBlur={formik.handleBlur}\r\n                        value={formik.values.message}\r\n                        // onChange={(e) => {\r\n                        //     props.onChange(e);\r\n                        //     formik.handleChange(e);\r\n                        // }}\r\n                    ></textarea>\r\n                <button className={s.sendMessageBtn}\r\n                        disabled={!formik.isValid || formik.values.message.length < 1}>Send\r\n                </button>\r\n            </form>\r\n            <span style={{color: 'red'}}>{formik.errors.message}</span>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n//Types\r\ntype FormikErrorType = {\r\n    message?: string\r\n}\r\n\r\ntype PropsType = {\r\n    sendMessage: (message: string) => void\r\n}\r\n","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/reduxStore\";\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: mapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent\r\n}\r\n\r\n\r\n//Types\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n}","import {sendMessageActionCreator} from \"../../redux/DialogsReducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport React from \"react\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        onSendMessageClick: (message: string) => {\r\n            dispatch(sendMessageActionCreator(message))\r\n        },\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(withAuthRedirect, connect(mapStateToProps, mapDispatchToProps))(Dialogs)\r\n"],"names":["DialogItem","props","path","id","className","s","activeClassName","to","name","Message","src","alt","message","AddMessageForm","formik","useFormik","initialValues","validate","values","errors","onSubmit","sendMessage","resetForm","handleSubmit","placeholder","getFieldProps","onBlur","handleBlur","value","disabled","isValid","length","style","color","mapStateToProps","state","isAuth","auth","compose","Component","connect","restProps","dialogsPage","dispatch","onSendMessageClick","sendMessageActionCreator","messagesElements","messages","map","m","dialogsElements","dialogs","d"],"sourceRoot":""}