{"version":3,"file":"static/js/856.654c078e.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatuswithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"img\":\"ProfileInfo_img__MCLml\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2ABVO\",\"avatarLarge\":\"ProfileInfo_avatarLarge__ijRVC\",\"infoBlock\":\"ProfileInfo_infoBlock__MECeo\",\"uploadBtnArea\":\"ProfileInfo_uploadBtnArea__BqhGC\"};","import React, {FC, useEffect, useState} from \"react\";\r\n\r\nexport const ProfileStatusWithHooks: FC<ProfileStatusPropsType> = (props) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onChangeStatus = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div onDoubleClick={activateEditMode}>\r\n                    <b>Статус:</b> {props.status || 'No status'}\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input autoFocus={true}\r\n                           value={status}\r\n                           onBlur={deactivateEditMode}\r\n                           onChange={onChangeStatus}\r\n                    />\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\n//types\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}","import {useFormik} from \"formik\";\r\nimport React from \"react\";\r\nimport {profileContactsType, ProfileType} from \"../../../redux/ProfileReducer\";\r\nimport {useAppSelector} from \"../../../redux/reduxStore\";\r\n\r\n\r\ntype ProfileDataFormType = {\r\n    profile: ProfileType\r\n    saveProfile: (profile: setProfileType) => void\r\n    setEditMode: (editMode: boolean) => void\r\n}\r\n\r\nexport type setProfileType = {\r\n    fullName: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    aboutMe: string\r\n    contacts: profileContactsType\r\n}\r\n\r\nexport const ProfileDataForm: React.FC<ProfileDataFormType> = ({profile, saveProfile, setEditMode}) => {\r\n    const errorMessage = useAppSelector(state => state.profilePage.errorMessage)\r\n\r\n    const onSubmitFormik=(saveProfile: (profile: setProfileType, setEditMode: (editMode: boolean) => void) => void,\r\n                          newProfile:TestType,\r\n                          setEditMode: (editMode: boolean) => void)=>{\r\n        saveProfile(newProfile, setEditMode)\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            fullName: profile.fullName,\r\n            lookingForAJob: profile.lookingForAJob,\r\n            lookingForAJobDescription: profile.lookingForAJobDescription,\r\n            aboutMe: profile.aboutMe,\r\n            facebook: profile.contacts.facebook,\r\n            website: profile.contacts.website,\r\n            vk: profile.contacts.vk,\r\n            twitter: profile.contacts.twitter,\r\n            instagram: profile.contacts.instagram,\r\n            youtube: profile.contacts.youtube,\r\n            github: profile.contacts.github,\r\n            mainLink: profile.contacts.mainLink,\r\n        },\r\n        onSubmit: values => {\r\n            const newProfile = {\r\n                fullName: values.fullName,\r\n                lookingForAJob: values.lookingForAJob,\r\n                lookingForAJobDescription: values.lookingForAJobDescription,\r\n                aboutMe: values.aboutMe,\r\n                contacts: {\r\n                    facebook: values.facebook,\r\n                    website: values.website,\r\n                    vk: values.vk,\r\n                    twitter: values.twitter,\r\n                    instagram: values.instagram,\r\n                    youtube: values.youtube,\r\n                    github: values.github,\r\n                    mainLink: values.mainLink\r\n                }\r\n            }\r\n            /*saveProfile(newProfile, setEditMode)*/\r\n            /*setEditMode(false)*/\r\n            //need realise waite\r\n            onSubmitFormik(saveProfile, newProfile, setEditMode)\r\n            // alert(JSON.stringify(values));\r\n        },\r\n    });\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            {errorMessage.length > 0 ? <div style={{color: 'red', background: \"orange\"}}>{errorMessage}</div> : ''}\r\n            <label htmlFor=\"fullName\">Full Name: </label>\r\n            <input\r\n                id=\"fullName\"\r\n                type=\"text\"\r\n                placeholder={'Full Name'}\r\n                {...formik.getFieldProps('fullName')}\r\n            />\r\n            <label htmlFor=\"lookingForAJob\">Looking for a job: </label>\r\n            <input\r\n                id=\"lookingForAJob\"\r\n                name=\"lookingForAJob\"\r\n                type=\"checkbox\"\r\n                onChange={formik.handleChange}\r\n                checked={formik.values.lookingForAJob}\r\n            />\r\n            <label htmlFor=\"lookingForAJobDescription\">My professional skills: </label>\r\n            <input\r\n                placeholder={'Professional skills'}\r\n                id=\"lookingForAJobDescription\"\r\n                type=\"text\"\r\n                {...formik.getFieldProps('lookingForAJobDescription')}\r\n            />\r\n            <label htmlFor=\"aboutMe\">About me: </label>\r\n            <input\r\n                id=\"aboutMe\"\r\n                type=\"text\"\r\n                placeholder={'About me'}\r\n                {...formik.getFieldProps('aboutMe')}\r\n            />\r\n            <label htmlFor=\"facebook\">Facebook: </label>\r\n            <input\r\n                /* id=\"facebook\"\r\n                 name=\"facebook\"\r\n                 type=\"facebook\"\r\n                 onChange={formik.handleChange}\r\n                 // value={formik.values.contacts.facebook}\r\n                 value={profile.contacts.facebook}*/\r\n                id=\"facebook\"\r\n                type=\"text\"\r\n                placeholder={\"facebook\"}\r\n                {...formik.getFieldProps('facebook')}\r\n            />\r\n            <label htmlFor=\"vk\">VK: </label>\r\n            <input\r\n                id=\"vk\"\r\n                type=\"vk\"\r\n                placeholder={\"vk\"}\r\n                // value={formik.values.contacts.vk}\r\n                {...formik.getFieldProps('vk')}\r\n            />\r\n            <label htmlFor=\"github\">Github: </label>\r\n            <input\r\n                id=\"github\"\r\n                type=\"github\"\r\n                placeholder={\"github\"}\r\n                // value={formik.values.contacts.github}\r\n                {...formik.getFieldProps('github')}\r\n            />\r\n            <label htmlFor=\"twitter\">Twitter: </label>\r\n            <input\r\n                id=\"twitter\"\r\n                type=\"twitter\"\r\n                placeholder={\"twitter\"}\r\n                // value={formik.values.contacts.twitter}\r\n                {...formik.getFieldProps('twitter')}\r\n            />\r\n            <label htmlFor=\"instagram\">Instagram: </label>\r\n            <input\r\n                id=\"instagram\"\r\n                type=\"instagram\"\r\n                placeholder={\"instagram\"}\r\n                // value={formik.values.contacts.instagram}\r\n                {...formik.getFieldProps('instagram')}\r\n            />\r\n            <label htmlFor=\"mainLink\">MainLink: </label>\r\n            <input\r\n                id=\"mainLink\"\r\n                type=\"mainLink\"\r\n                placeholder={\"mainLink\"}\r\n                // value={formik.values.contacts.mainLink}\r\n                {...formik.getFieldProps('mainLink')}\r\n            />\r\n            <label htmlFor=\"website\">Website: </label>\r\n            <input\r\n                id=\"website\"\r\n                type=\"website\"\r\n                placeholder={\"website\"}\r\n                // value={formik.values.contacts.website}\r\n                {...formik.getFieldProps('website')}\r\n            />\r\n            <label htmlFor=\"youtube\">Youtube: </label>\r\n            <input\r\n                id=\"youtube\"\r\n                type=\"youtube\"\r\n                placeholder={\"youtube\"}\r\n                // value={formik.values.contacts.youtube}\r\n                {...formik.getFieldProps('youtube')}\r\n            />\r\n            <button type=\"submit\">Save</button>\r\n        </form>\r\n    )\r\n}\r\n\r\ntype TestType = {\r\n    fullName: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    aboutMe: string\r\n    contacts: {\r\n        facebook: string\r\n        website: string\r\n        vk: string\r\n        twitter: string\r\n        instagram: string\r\n        youtube: string\r\n        github: string\r\n        mainLink: string\r\n    }\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport {profileContactsType, ProfileType} from \"../../../redux/ProfileReducer\";\r\nimport {Preloader} from \"../../common/preloader/Preloader\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatuswithHooks\";\r\nimport userPhoto from '../../../assets/images/defaultAvatar.jpeg'\r\nimport {ProfileDataForm, setProfileType} from \"./ProfileDataForm\";\r\n\r\ntype ProfileInfoProps = {\r\n    profile: ProfileType;\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: setProfileType) => void\r\n};\r\n\r\n\r\nexport const ProfileInfo: React.FC<ProfileInfoProps> = (props) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <div>\r\n                    <img alt={'avatar'} src={props.profile.photos.large || userPhoto} className={s.avatarLarge}/>\r\n                    <div className={s.uploadBtnArea}>{props.isOwner &&\r\n                        <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n                    </div>\r\n                </div>\r\n                <div className={s.infoBlock}>\r\n                    <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n                    {editMode\r\n                        ? <ProfileDataForm profile={props.profile} saveProfile={props.saveProfile} setEditMode={setEditMode}/>\r\n                        : <ProfileData profile={props.profile} isOwner={props.isOwner} activateEditMode={() => setEditMode(true)}/>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nconst ProfileData = (props: ProfileDataPropsType) => {\r\n    return (\r\n        <>\r\n            {props.isOwner && <button onClick={props.activateEditMode}>Редактировать профиль</button>}\r\n            <p><b>Меня зовут:</b> {props.profile.fullName}</p>\r\n            <p><b>О себе:</b> {props.profile.aboutMe}</p>\r\n            <p><b>Ищу работу:</b> {props.profile.lookingForAJob ? 'Да! Дайте офер!' : 'Не ищу, жду чуда'}</p>\r\n            {props.profile.lookingForAJob && <p><b>Мои скилы:</b> {props.profile.lookingForAJobDescription}</p>}\r\n            <div>\r\n                <b>Контакты:</b> {Object.keys(props.profile.contacts).map((key) => {\r\n                return <Contact key={key} contactTitle={key}\r\n                                contactValue={props.profile?.contacts[key as keyof profileContactsType]}/>\r\n            })}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nconst Contact = ({contactTitle, contactValue}: ContactPropsType) => {\r\n    return <div><b>{contactTitle}</b> : {contactValue}</div>\r\n}\r\n\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner?: boolean\r\n    activateEditMode?: () => void\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"myPosts\":\"MyPosts_myPosts__y4rcD\",\"posts\":\"MyPosts_posts__2mx4z\",\"sendMessageForm\":\"MyPosts_sendMessageForm__xoEAa\",\"messageArea\":\"MyPosts_messageArea__i8Rnl\",\"sendMessageBtn\":\"MyPosts_sendMessageBtn__zVnDn\",\"error\":\"MyPosts_error__VEYNG\"};","// extracted by mini-css-extract-plugin\nexport default {\"post\":\"Post_post__j6m0S\"};","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\nexport const Post = (props: PostPropsType) => {\r\n    return (\r\n        <div className={s.post}>\r\n            <img\r\n                src=\"https://media.istockphoto.com/id/1300845620/ru/%D0%B2%D0%B5%D0%BA%D1%82%D0%BE%D1%80%D0%BD%D0%B0%D1%8F/%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8C-icon-flat-%D0%B8%D0%B7%D0%BE%D0%BB%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD-%D0%BD%D0%B0-%D0%B1%D0%B5%D0%BB%D0%BE%D0%BC-%D1%84%D0%BE%D0%BD%D0%B5-%D1%81%D0%B8%D0%BC%D0%B2%D0%BE%D0%BB-%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8F-%D0%B8%D0%BB%D0%BB%D1%8E%D1%81%D1%82%D1%80%D0%B0%D1%86%D0%B8%D1%8F-%D0%B2%D0%B5%D0%BA%D1%82%D0%BE%D1%80%D0%B0.jpg?s=612x612&w=0&k=20&c=Po5TTi0yw6lM7qz6yay5vUbUBy3kAEWrpQmDaUMWnek=\"\r\n                alt=\"avatar\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>Like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {memo} from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport {Post} from \"./Post/Post\";\r\nimport {useFormik} from \"formik\";\r\n\r\ntype PostsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport type MyPostsPropsType = {\r\n    posts: PostsType[]\r\n    addPost: (post: string) => void\r\n}\r\n\r\nexport const MyPosts = memo((props: MyPostsPropsType) => {\r\n\r\n    const addPost = (post: string) => {\r\n        props.addPost(post)\r\n    }\r\n\r\n\r\n    let postsElements = props.posts.map((p) => {\r\n        return (\r\n            <Post key={p.id} message={p.message} likesCount={p.likesCount}/>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className={s.myPosts}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <AddPostForm addPost={addPost}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\n\r\nexport const AddPostForm = (props: PropsType) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            post: ''\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.post) {\r\n                errors.post = 'Сannot be empty'\r\n            }\r\n\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            // dispatch(loginTC(values))\r\n            // alert(JSON.stringify(values));\r\n            props.addPost(values.post)\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <form className={s.sendMessageForm} onSubmit={formik.handleSubmit}>\r\n                    <textarea\r\n                        placeholder='Enter message'\r\n                        className={formik.errors.post ? s.error + ' ' + s.messageArea : s.messageArea}\r\n                        {...formik.getFieldProps('post')}\r\n                        name=\"post\"\r\n                        onBlur={formik.handleBlur}\r\n                        value={formik.values.post}\r\n                    ></textarea>\r\n                <button className={s.sendMessageBtn}\r\n                        disabled={!formik.isValid || formik.values.post.length < 1}>Send\r\n                </button>\r\n            </form>\r\n            <span style={{color: 'red'}}>{formik.errors.post}</span>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n//Types\r\ntype FormikErrorType = {\r\n    post?: string\r\n}\r\n\r\ntype PropsType = {\r\n    addPost: (post: string) => void\r\n}\r\n\r\n","import {addPostActionCreator} from \"../../../redux/ProfileReducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/reduxStore\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addPost: (post: string) => {\r\n            dispatch(addPostActionCreator(post))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from 'react';\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/ProfileReducer\";\r\nimport {setProfileType} from \"./ProfileInfo/ProfileDataForm\";\r\n\r\ntype ProfileProps = {\r\n    profile: ProfileType;\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: () => void\r\n    saveProfile: (profile: setProfileType) => void\r\n};\r\n\r\nexport const Profile = (props: ProfileProps) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo savePhoto={props.savePhoto}\r\n                         isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                         saveProfile={props.saveProfile}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getUserProfileTC,\r\n    getUserStatusTC,\r\n    ProfileType,\r\n    savePhoto, saveProfile,\r\n    updateUserStatusTC\r\n} from \"../../redux/ProfileReducer\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {setProfileType} from \"./ProfileInfo/ProfileDataForm\";\r\n\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile = () => {\r\n        let userId = +this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizesUserId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfileTC(userId)\r\n        this.props.getUserStatusTC(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile\r\n                    {...this.props}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateUserStatusTC}\r\n                    isOwner={!this.props.match.params.userId}\r\n                    savePhoto={this.props.savePhoto}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizesUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfileTC, getUserStatusTC, updateUserStatusTC, savePhoto, saveProfile}), withRouter)\r\n(ProfileContainer)\r\n\r\n\r\n//Types\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    authorizesUserId: number\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfileTC: (userId: number) => void\r\n    getUserStatusTC: (userId: number) => void\r\n    updateUserStatusTC: (status: string) => void\r\n    savePhoto: () => void\r\n    saveProfile: (profile: setProfileType) => void\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype ProfilePropsType = MapStateToPropsType & MapDispatchPropsType\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","value","onBlur","updateStatus","onChange","e","currentTarget","ProfileDataForm","profile","saveProfile","errorMessage","useAppSelector","state","profilePage","formik","useFormik","initialValues","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","facebook","contacts","website","vk","twitter","instagram","youtube","github","mainLink","onSubmit","values","newProfile","onSubmitFormik","handleSubmit","length","style","color","background","htmlFor","id","type","placeholder","getFieldProps","name","handleChange","checked","ProfileInfo","Preloader","className","s","alt","src","photos","large","userPhoto","isOwner","target","files","savePhoto","ProfileData","activateEditMode","onClick","Object","keys","map","key","Contact","contactTitle","contactValue","Post","message","likesCount","MyPosts","memo","postsElements","posts","p","AddPostForm","addPost","post","validate","errors","resetForm","handleBlur","disabled","isValid","MyPostsContainer","connect","dispatch","addPostActionCreator","Profile","ProfileContainer","refreshProfile","userId","match","params","authorizesUserId","history","push","getUserProfileTC","getUserStatusTC","this","prevProps","prevState","snapshot","updateUserStatusTC","React","compose","auth","isAuth","withRouter"],"sourceRoot":""}